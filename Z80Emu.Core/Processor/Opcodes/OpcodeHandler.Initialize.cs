namespace Z80Emu.Core.Processor.Opcodes;

public partial class OpcodeHandler
{
    private void InitializeOpcodes()
    {
        Add(new Opcode("ADC A,(HL)", new [] { "8E" }, "7", "Adds (HL) and the carry flag to A."));
        Add(new Opcode("ADC A,(IX+d)", new [] { "DD", "8E", "d" }, "19", "Adds the value pointed to by IX plus $d and the carry flag to A."));
        Add(new Opcode("ADC A,(IY+d)", new [] { "FD", "8E", "d" }, "19", "Adds the value pointed to by IY plus $d and the carry flag to A."));
        Add(new Opcode("ADC A,n", new [] { "CE", "n" }, "7", "Adds $n and the carry flag to A."));
        Add(new Opcode("ADC A,B", new [] { "88" }, "4", "Adds B and the carry flag to A."));
        Add(new Opcode("ADC A,C", new [] { "89" }, "4", "Adds C and the carry flag to A."));
        Add(new Opcode("ADC A,D", new [] { "8A" }, "4", "Adds D and the carry flag to A."));
        Add(new Opcode("ADC A,E", new [] { "8B" }, "4", "Adds E and the carry flag to A."));
        Add(new Opcode("ADC A,H", new [] { "8C" }, "4", "Adds H and the carry flag to A."));
        Add(new Opcode("ADC A,L", new [] { "8D" }, "4", "Adds L and the carry flag to A."));
        Add(new Opcode("ADC A,A", new [] { "8F" }, "4", "Adds A and the carry flag to A."));
        Add(new Opcode("ADC HL,BC", new [] { "ED", "4A" }, "15", "Adds BC and the carry flag to HL."));
        Add(new Opcode("ADC HL,DE", new [] { "ED", "5A" }, "15", "Adds DE and the carry flag to HL."));
        Add(new Opcode("ADC HL,HL", new [] { "ED", "6A" }, "15", "Adds HL and the carry flag to HL."));
        Add(new Opcode("ADC HL,SP", new [] { "ED", "7A" }, "15", "Adds SP and the carry flag to HL."));
        Add(new Opcode("ADD A,(HL)", new [] { "86" }, "7", "Adds (HL) to A."));
        Add(new Opcode("ADD A,(IX+d)", new [] { "DD", "86", "d" }, "19", "Adds the value pointed to by IX plus $d to A."));
        Add(new Opcode("ADD A,(IY+d)", new [] { "FD", "86", "d" }, "19", "Adds the value pointed to by IY plus $d to A."));
        Add(new Opcode("ADD A,n", new [] { "C6", "n" }, "7", "Adds $n to A."));
        Add(new Opcode("ADD A,B", new [] { "80" }, "4", "Adds B to A."));
        Add(new Opcode("ADD A,C", new [] { "81" }, "4", "Adds C to A."));
        Add(new Opcode("ADD A,D", new [] { "82" }, "4", "Adds D to A."));
        Add(new Opcode("ADD A,E", new [] { "83" }, "4", "Adds E to A."));
        Add(new Opcode("ADD A,H", new [] { "84" }, "4", "Adds H to A."));
        Add(new Opcode("ADD A,L", new [] { "85" }, "4", "Adds L to A."));
        Add(new Opcode("ADD A,A", new [] { "87" }, "4", "Adds A to A."));
        Add(new Opcode("ADD HL,BC", new [] { "09" }, "11", "The value of BC is added to HL."));
        Add(new Opcode("ADD HL,DE", new [] { "19" }, "11", "The value of DE is added to HL."));
        Add(new Opcode("ADD HL,HL", new [] { "29" }, "11", "The value of HL is added to HL."));
        Add(new Opcode("ADD HL,SP", new [] { "39" }, "11", "The value of SP is added to HL."));
        Add(new Opcode("ADD IX,BC", new [] { "DD", "09" }, "15", "The value of BC is added to IX."));
        Add(new Opcode("ADD IX,DE", new [] { "DD", "19" }, "15", "The value of DE is added to IX."));
        Add(new Opcode("ADD IX,IX", new [] { "DD", "29" }, "15", "The value of IX is added to IX."));
        Add(new Opcode("ADD IX,SP", new [] { "DD", "39" }, "15", "The value of SP is added to IX."));
        Add(new Opcode("ADD IY,BC", new [] { "FD", "09" }, "15", "The value of BC is added to IY."));
        Add(new Opcode("ADD IY,DE", new [] { "FD", "19" }, "15", "The value of DE is added to IY."));
        Add(new Opcode("ADD IY,IY", new [] { "FD", "29" }, "15", "The value of IY is added to IY."));
        Add(new Opcode("ADD IY,SP", new [] { "FD", "39" }, "15", "The value of SP is added to IY."));
        Add(new Opcode("AND (HL)", new [] { "A6" }, "7", "Bitwise AND on A with (HL)."));
        Add(new Opcode("AND (IX+d)", new [] { "DD", "A6", "d" }, "19", "Bitwise AND on A with the value pointed to by IX plus $d."));
        Add(new Opcode("AND (IY+d)", new [] { "FD", "A6", "d" }, "19", "Bitwise AND on A with the value pointed to by IY plus $d."));
        Add(new Opcode("AND n", new [] { "E6", "n" }, "7", "Bitwise AND on A with $n."));
        Add(new Opcode("AND B", new [] { "A0" }, "4", "Bitwise AND on A with B."));
        Add(new Opcode("AND C", new [] { "A1" }, "4", "Bitwise AND on A with C."));
        Add(new Opcode("AND D", new [] { "A2" }, "4", "Bitwise AND on A with D."));
        Add(new Opcode("AND E", new [] { "A3" }, "4", "Bitwise AND on A with E."));
        Add(new Opcode("AND H", new [] { "A4" }, "4", "Bitwise AND on A with H."));
        Add(new Opcode("AND L", new [] { "A5" }, "4", "Bitwise AND on A with L."));
        Add(new Opcode("AND A", new [] { "A7" }, "4", "Bitwise AND on A with A."));
        Add(new Opcode("BIT 0,(HL)", new [] { "CB", "46" }, "12", "Tests bit 0 of (HL)."));
        Add(new Opcode("BIT 1,(HL)", new [] { "CB", "4E" }, "12", "Tests bit 1 of (HL)."));
        Add(new Opcode("BIT 2,(HL)", new [] { "CB", "56" }, "12", "Tests bit 2 of (HL)."));
        Add(new Opcode("BIT 3,(HL)", new [] { "CB", "5E" }, "12", "Tests bit 3 of (HL)."));
        Add(new Opcode("BIT 4,(HL)", new [] { "CB", "66" }, "12", "Tests bit 4 of (HL)."));
        Add(new Opcode("BIT 5,(HL)", new [] { "CB", "6E" }, "12", "Tests bit 5 of (HL)."));
        Add(new Opcode("BIT 6,(HL)", new [] { "CB", "76" }, "12", "Tests bit 6 of (HL)."));
        Add(new Opcode("BIT 7,(HL)", new [] { "CB", "7E" }, "12", "Tests bit 7 of (HL)."));
        Add(new Opcode("BIT 0,(IX+d)", new [] { "DD", "CB", "d", "46" }, "20", "Tests bit 0 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("BIT 1,(IX+d)", new [] { "DD", "CB", "d", "4E" }, "20", "Tests bit 1 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("BIT 2,(IX+d)", new [] { "DD", "CB", "d", "56" }, "20", "Tests bit 2 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("BIT 3,(IX+d)", new [] { "DD", "CB", "d", "5E" }, "20", "Tests bit 3 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("BIT 4,(IX+d)", new [] { "DD", "CB", "d", "66" }, "20", "Tests bit 4 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("BIT 5,(IX+d)", new [] { "DD", "CB", "d", "6E" }, "20", "Tests bit 5 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("BIT 6,(IX+d)", new [] { "DD", "CB", "d", "76" }, "20", "Tests bit 6 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("BIT 7,(IX+d)", new [] { "DD", "CB", "d", "7E" }, "20", "Tests bit 7 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("BIT 0,(IY+d)", new [] { "FD", "CB", "d", "46" }, "20", "Tests bit 0 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("BIT 1,(IY+d)", new [] { "FD", "CB", "d", "4E" }, "20", "Tests bit 1 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("BIT 2,(IY+d)", new [] { "FD", "CB", "d", "56" }, "20", "Tests bit 2 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("BIT 3,(IY+d)", new [] { "FD", "CB", "d", "5E" }, "20", "Tests bit 3 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("BIT 4,(IY+d)", new [] { "FD", "CB", "d", "66" }, "20", "Tests bit 4 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("BIT 5,(IY+d)", new [] { "FD", "CB", "d", "6E" }, "20", "Tests bit 5 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("BIT 6,(IY+d)", new [] { "FD", "CB", "d", "76" }, "20", "Tests bit 6 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("BIT 7,(IY+d)", new [] { "FD", "CB", "d", "7E" }, "20", "Tests bit 7 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("BIT 0,B", new [] { "CB", "40" }, "8", "Tests bit 0 of B."));
        Add(new Opcode("BIT 1,B", new [] { "CB", "48" }, "8", "Tests bit 1 of B."));
        Add(new Opcode("BIT 2,B", new [] { "CB", "50" }, "8", "Tests bit 2 of B."));
        Add(new Opcode("BIT 3,B", new [] { "CB", "58" }, "8", "Tests bit 3 of B."));
        Add(new Opcode("BIT 4,B", new [] { "CB", "60" }, "8", "Tests bit 4 of B."));
        Add(new Opcode("BIT 5,B", new [] { "CB", "68" }, "8", "Tests bit 5 of B."));
        Add(new Opcode("BIT 6,B", new [] { "CB", "70" }, "8", "Tests bit 6 of B."));
        Add(new Opcode("BIT 7,B", new [] { "CB", "78" }, "8", "Tests bit 7 of B."));
        Add(new Opcode("BIT 0,C", new [] { "CB", "41" }, "8", "Tests bit 0 of C."));
        Add(new Opcode("BIT 1,C", new [] { "CB", "49" }, "8", "Tests bit 1 of C."));
        Add(new Opcode("BIT 2,C", new [] { "CB", "51" }, "8", "Tests bit 2 of C."));
        Add(new Opcode("BIT 3,C", new [] { "CB", "59" }, "8", "Tests bit 3 of C."));
        Add(new Opcode("BIT 4,C", new [] { "CB", "61" }, "8", "Tests bit 4 of C."));
        Add(new Opcode("BIT 5,C", new [] { "CB", "69" }, "8", "Tests bit 5 of C."));
        Add(new Opcode("BIT 6,C", new [] { "CB", "71" }, "8", "Tests bit 6 of C."));
        Add(new Opcode("BIT 7,C", new [] { "CB", "79" }, "8", "Tests bit 7 of C."));
        Add(new Opcode("BIT 0,D", new [] { "CB", "42" }, "8", "Tests bit 0 of D."));
        Add(new Opcode("BIT 1,D", new [] { "CB", "4A" }, "8", "Tests bit 1 of D."));
        Add(new Opcode("BIT 2,D", new [] { "CB", "52" }, "8", "Tests bit 2 of D."));
        Add(new Opcode("BIT 3,D", new [] { "CB", "5A" }, "8", "Tests bit 3 of D."));
        Add(new Opcode("BIT 4,D", new [] { "CB", "62" }, "8", "Tests bit 4 of D."));
        Add(new Opcode("BIT 5,D", new [] { "CB", "6A" }, "8", "Tests bit 5 of D."));
        Add(new Opcode("BIT 6,D", new [] { "CB", "72" }, "8", "Tests bit 6 of D."));
        Add(new Opcode("BIT 7,D", new [] { "CB", "7A" }, "8", "Tests bit 7 of D."));
        Add(new Opcode("BIT 0,E", new [] { "CB", "43" }, "8", "Tests bit 0 of E."));
        Add(new Opcode("BIT 1,E", new [] { "CB", "4B" }, "8", "Tests bit 1 of E."));
        Add(new Opcode("BIT 2,E", new [] { "CB", "53" }, "8", "Tests bit 2 of E."));
        Add(new Opcode("BIT 3,E", new [] { "CB", "5B" }, "8", "Tests bit 3 of E."));
        Add(new Opcode("BIT 4,E", new [] { "CB", "63" }, "8", "Tests bit 4 of E."));
        Add(new Opcode("BIT 5,E", new [] { "CB", "6B" }, "8", "Tests bit 5 of E."));
        Add(new Opcode("BIT 6,E", new [] { "CB", "73" }, "8", "Tests bit 6 of E."));
        Add(new Opcode("BIT 7,E", new [] { "CB", "7B" }, "8", "Tests bit 7 of E."));
        Add(new Opcode("BIT 0,H", new [] { "CB", "44" }, "8", "Tests bit 0 of H."));
        Add(new Opcode("BIT 1,H", new [] { "CB", "4C" }, "8", "Tests bit 1 of H."));
        Add(new Opcode("BIT 2,H", new [] { "CB", "54" }, "8", "Tests bit 2 of H."));
        Add(new Opcode("BIT 3,H", new [] { "CB", "5C" }, "8", "Tests bit 3 of H."));
        Add(new Opcode("BIT 4,H", new [] { "CB", "64" }, "8", "Tests bit 4 of H."));
        Add(new Opcode("BIT 5,H", new [] { "CB", "6C" }, "8", "Tests bit 5 of H."));
        Add(new Opcode("BIT 6,H", new [] { "CB", "74" }, "8", "Tests bit 6 of H."));
        Add(new Opcode("BIT 7,H", new [] { "CB", "7C" }, "8", "Tests bit 7 of H."));
        Add(new Opcode("BIT 0,L", new [] { "CB", "45" }, "8", "Tests bit 0 of L."));
        Add(new Opcode("BIT 1,L", new [] { "CB", "4D" }, "8", "Tests bit 1 of L."));
        Add(new Opcode("BIT 2,L", new [] { "CB", "55" }, "8", "Tests bit 2 of L."));
        Add(new Opcode("BIT 3,L", new [] { "CB", "5D" }, "8", "Tests bit 3 of L."));
        Add(new Opcode("BIT 4,L", new [] { "CB", "65" }, "8", "Tests bit 4 of L."));
        Add(new Opcode("BIT 5,L", new [] { "CB", "6D" }, "8", "Tests bit 5 of L."));
        Add(new Opcode("BIT 6,L", new [] { "CB", "75" }, "8", "Tests bit 6 of L."));
        Add(new Opcode("BIT 7,L", new [] { "CB", "7D" }, "8", "Tests bit 7 of L."));
        Add(new Opcode("BIT 0,A", new [] { "CB", "47" }, "8", "Tests bit 0 of A."));
        Add(new Opcode("BIT 1,A", new [] { "CB", "4F" }, "8", "Tests bit 1 of A."));
        Add(new Opcode("BIT 2,A", new [] { "CB", "57" }, "8", "Tests bit 2 of A."));
        Add(new Opcode("BIT 3,A", new [] { "CB", "5F" }, "8", "Tests bit 3 of A."));
        Add(new Opcode("BIT 4,A", new [] { "CB", "67" }, "8", "Tests bit 4 of A."));
        Add(new Opcode("BIT 5,A", new [] { "CB", "6F" }, "8", "Tests bit 5 of A."));
        Add(new Opcode("BIT 6,A", new [] { "CB", "77" }, "8", "Tests bit 6 of A."));
        Add(new Opcode("BIT 7,A", new [] { "CB", "7F" }, "8", "Tests bit 7 of A."));
        Add(new Opcode("CALL C,nn", new [] { "DC", "nn" }, "17/10", "If the carry flag is set, the current PC value plus three is pushed onto the stack, then is loaded with $nn."));
        Add(new Opcode("CALL M,nn", new [] { "FC", "nn" }, "17/10", "If the sign flag is set, the current PC value plus three is pushed onto the stack, then is loaded with $nn."));
        Add(new Opcode("CALL NC,nn", new [] { "D4", "nn" }, "17/10", "If the carry flag is unset, the current PC value plus three is pushed onto the stack, then is loaded with $nn."));
        Add(new Opcode("CALL NZ,nn", new [] { "C4", "nn" }, "17/10", "If the zero flag is unset, the current PC value plus three is pushed onto the stack, then is loaded with $nn."));
        Add(new Opcode("CALL P,nn", new [] { "F4", "nn" }, "17/10", "If the sign flag is unset, the current PC value plus three is pushed onto the stack, then is loaded with $nn."));
        Add(new Opcode("CALL PE,nn", new [] { "EC", "nn" }, "17/10", "If the parity/overflow flag is set, the current PC value plus three is pushed onto the stack, then is loaded with $nn."));
        Add(new Opcode("CALL PO,nn", new [] { "E4", "nn" }, "17/10", "If the parity/overflow flag is unset, the current PC value plus three is pushed onto the stack, then is loaded with $nn."));
        Add(new Opcode("CALL Z,nn", new [] { "CC", "nn" }, "17/10", "If the zero flag is set, the current PC value plus three is pushed onto the stack, then is loaded with $nn."));
        Add(new Opcode("CALL nn", new [] { "CD", "nn" }, "17", "The current PC value plus three is pushed onto the stack, then is loaded with $nn."));
        Add(new Opcode("CCF", new [] { "3F" }, "4", "Inverts the carry flag."));
        Add(new Opcode("CP (HL)", new [] { "BE" }, "7", "Subtracts (HL) from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP (IX+d)", new [] { "DD", "BE", "d" }, "19", "Subtracts the value pointed to by IX plus $d from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP (IY+d)", new [] { "FD", "BE", "d" }, "19", "Subtracts the value pointed to by IY plus $d from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP n", new [] { "FE", "n" }, "7", "Subtracts $n from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP B", new [] { "B8" }, "4", "Subtracts B from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP C", new [] { "B9" }, "4", "Subtracts C from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP D", new [] { "BA" }, "4", "Subtracts D from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP E", new [] { "BB" }, "4", "Subtracts E from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP H", new [] { "BC" }, "4", "Subtracts H from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP L", new [] { "BD" }, "4", "Subtracts L from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CP A", new [] { "BF" }, "4", "Subtracts A from A and affects flags according to the result. A is not modified."));
        Add(new Opcode("CPD", new [] { "ED", "A9" }, "16", "Compares the value of the memory location pointed to by HL with A. Then HL and BC are decremented. p/v is reset if BC becomes zero and set otherwise."));
        Add(new Opcode("CPDR", new [] { "ED", "B9" }, "21/16", "Compares the value of the memory location pointed to by HL with A. Then HL and BC are decremented. If BC is not zero and z is not set, this operation is repeated. p/v is reset if BC becomes zero and set otherwise, acting as an indicator that HL reached a memory location whose value equalled A before the counter went to zero. Interrupts can trigger while this instruction is processing."));
        Add(new Opcode("CPI", new [] { "ED", "A1" }, "16", "Compares the value of the memory location pointed to by HL with A. Then HL is incremented and BC is decremented. p/v is reset if BC becomes zero and set otherwise."));
        Add(new Opcode("CPIR", new [] { "ED", "B1" }, "21/16", "Compares the value of the memory location pointed to by HL with A. Then HL is incremented and BC is decremented. If BC is not zero and z is not set, this operation is repeated. p/v is reset if BC becomes zero and set otherwise, acting as an indicator that HL reached a memory location whose value equalled A before the counter went to zero. Interrupts can trigger while this instruction is processing."));
        Add(new Opcode("CPL", new [] { "2F" }, "4", "The contents of A are inverted (one's complement)."));
        Add(new Opcode("DAA", new [] { "27" }, "4", "Adjusts A for BCD addition and subtraction operations."));
        Add(new Opcode("DEC (HL)", new [] { "35" }, "11", "Subtracts one from (HL)."));
        Add(new Opcode("DEC (IX+d)", new [] { "DD", "35", "d" }, "23", "Subtracts one from the memory location pointed to by IX plus $d."));
        Add(new Opcode("DEC (IY+d)", new [] { "FD", "35", "d" }, "23", "Subtracts one from the memory location pointed to by IY plus $d."));
        Add(new Opcode("DEC IX", new [] { "DD", "2B" }, "10", "Subtracts one from IX."));
        Add(new Opcode("DEC IY", new [] { "FD", "2B" }, "10", "Subtracts one from IY."));
        Add(new Opcode("DEC BC", new [] { "0B" }, "6", "Subtracts one from BC."));
        Add(new Opcode("DEC DE", new [] { "1B" }, "6", "Subtracts one from DE."));
        Add(new Opcode("DEC HL", new [] { "2B" }, "6", "Subtracts one from HL."));
        Add(new Opcode("DEC SP", new [] { "3B" }, "6", "Subtracts one from SP."));
        Add(new Opcode("DEC B", new [] { "05" }, "4", "Subtracts one from B."));
        Add(new Opcode("DEC C", new [] { "0D" }, "4", "Subtracts one from C."));
        Add(new Opcode("DEC D", new [] { "15" }, "4", "Subtracts one from D."));
        Add(new Opcode("DEC E", new [] { "1D" }, "4", "Subtracts one from E."));
        Add(new Opcode("DEC H", new [] { "25" }, "4", "Subtracts one from H."));
        Add(new Opcode("DEC L", new [] { "2D" }, "4", "Subtracts one from L."));
        Add(new Opcode("DEC A", new [] { "3D" }, "4", "Subtracts one from A."));
        Add(new Opcode("DI", new [] { "F3" }, "4", "Resets both interrupt flip-flops, thus prenting maskable interrupts from triggering."));
        Add(new Opcode("DJNZ d", new [] { "10", "d-$-2" }, "13/8", "The B register is decremented, and if not zero, the signed value $d is added to PC. The jump is measured from the start of the instruction opcode."));
        Add(new Opcode("EI", new [] { "FB" }, "4", "Sets both interrupt flip-flops, thus allowing maskable interrupts to occur. An interrupt will not occur until after the immediately following instruction."));
        Add(new Opcode("EX (SP),HL", new [] { "E3" }, "19", "Exchanges (SP) with L, and (SP+1) with H."));
        Add(new Opcode("EX (SP),IX", new [] { "DD", "E3" }, "23", "Exchanges (SP) with IXL, and (SP+1) with IXH."));
        Add(new Opcode("EX (SP),IY", new [] { "FD", "E3" }, "23", "Exchanges (SP) with IYL, and (SP+1) with IYH."));
        Add(new Opcode("EX AF,AF'", new [] { "08" }, "4", "Exchanges the 16-bit contents of AF and AF'."));
        Add(new Opcode("EX DE,HL", new [] { "EB" }, "4", "Exchanges the 16-bit contents of DE and HL."));
        Add(new Opcode("EXX", new [] { "D9" }, "4", "Exchanges the 16-bit contents of BC, DE, and HL with BC', DE', and HL'."));
        Add(new Opcode("HALT", new [] { "76" }, "4", "Suspends CPU operation until an interrupt or reset occurs."));
        Add(new Opcode("IM 0", new [] { "ED", "46" }, "8", "Sets interrupt mode 0."));
        Add(new Opcode("IM 1", new [] { "ED", "56" }, "8", "Sets interrupt mode 1."));
        Add(new Opcode("IM 2", new [] { "ED", "5E" }, "8", "Sets interrupt mode 2."));
        Add(new Opcode("IN A,(n)", new [] { "DB", "n" }, "11", "A byte from port $n is written to A."));
        Add(new Opcode("IN B,(C)", new [] { "ED", "40" }, "12", "A byte from port C is written to B."));
        Add(new Opcode("IN C,(C)", new [] { "ED", "48" }, "12", "A byte from port C is written to C."));
        Add(new Opcode("IN D,(C)", new [] { "ED", "50" }, "12", "A byte from port C is written to D."));
        Add(new Opcode("IN E,(C)", new [] { "ED", "58" }, "12", "A byte from port C is written to E."));
        Add(new Opcode("IN H,(C)", new [] { "ED", "60" }, "12", "A byte from port C is written to H."));
        Add(new Opcode("IN L,(C)", new [] { "ED", "68" }, "12", "A byte from port C is written to L."));
        Add(new Opcode("IN A,(C)", new [] { "ED", "78" }, "12", "A byte from port C is written to A."));
        Add(new Opcode("INC (HL)", new [] { "34" }, "11", "Adds one to (HL)."));
        Add(new Opcode("INC (IX+d)", new [] { "DD", "34", "d" }, "23", "Adds one to the memory location pointed to by IX plus $d."));
        Add(new Opcode("INC (IY+d)", new [] { "FD", "34", "d" }, "23", "Adds one to the memory location pointed to by IY plus $d."));
        Add(new Opcode("INC IX", new [] { "DD", "23" }, "10", "Adds one to IX."));
        Add(new Opcode("INC IY", new [] { "FD", "23" }, "10", "Adds one to IY."));
        Add(new Opcode("INC BC", new [] { "03" }, "6", "Adds one to BC."));
        Add(new Opcode("INC DE", new [] { "13" }, "6", "Adds one to DE."));
        Add(new Opcode("INC HL", new [] { "23" }, "6", "Adds one to HL."));
        Add(new Opcode("INC SP", new [] { "33" }, "6", "Adds one to SP."));
        Add(new Opcode("INC B", new [] { "04" }, "4", "Adds one to B."));
        Add(new Opcode("INC C", new [] { "0C" }, "4", "Adds one to C."));
        Add(new Opcode("INC D", new [] { "14" }, "4", "Adds one to D."));
        Add(new Opcode("INC E", new [] { "1C" }, "4", "Adds one to E."));
        Add(new Opcode("INC H", new [] { "24" }, "4", "Adds one to H."));
        Add(new Opcode("INC L", new [] { "2C" }, "4", "Adds one to L."));
        Add(new Opcode("INC A", new [] { "3C" }, "4", "Adds one to A."));
        Add(new Opcode("IND", new [] { "ED", "AA" }, "16", "A byte from port C is written to the memory location pointed to by HL. Then HL and B are decremented."));
        Add(new Opcode("INDR", new [] { "ED", "BA" }, "21/16", "A byte from port C is written to the memory location pointed to by HL. Then HL and B are decremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing."));
        Add(new Opcode("INI", new [] { "ED", "A2" }, "16", "A byte from port C is written to the memory location pointed to by HL. Then HL is incremented and B is decremented."));
        Add(new Opcode("INIR", new [] { "ED", "B2" }, "21/16", "A byte from port C is written to the memory location pointed to by HL. Then HL is incremented and B is decremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing."));
        Add(new Opcode("JP (HL)", new [] { "E9" }, "4", "Loads the value of HL into PC."));
        Add(new Opcode("JP (IX)", new [] { "DD", "E9" }, "8", "Loads the value of IX into PC."));
        Add(new Opcode("JP (IY)", new [] { "FD", "E9" }, "8", "Loads the value of IY into PC."));
        Add(new Opcode("JP C,nn", new [] { "DA", "nn" }, "10", "If the carry flag is set, $nn is copied to PC."));
        Add(new Opcode("JP M,nn", new [] { "FA", "nn" }, "10", "If the sign flag is set, $nn is copied to PC."));
        Add(new Opcode("JP NC,nn", new [] { "D2", "nn" }, "10", "If the carry flag is unset, $nn is copied to PC."));
        Add(new Opcode("JP NZ,nn", new [] { "C2", "nn" }, "10", "If the zero flag is unset, $nn is copied to PC."));
        Add(new Opcode("JP P,nn", new [] { "F2", "nn" }, "10", "If the sign flag is unset, $nn is copied to PC."));
        Add(new Opcode("JP PE,nn", new [] { "EA", "nn" }, "10", "If the parity/overflow flag is set, $nn is copied to PC."));
        Add(new Opcode("JP PO,nn", new [] { "E2", "nn" }, "10", "If the parity/overflow flag is unset, $nn is copied to PC."));
        Add(new Opcode("JP Z,nn", new [] { "CA", "nn" }, "10", "If the zero flag is set, $nn is copied to PC."));
        Add(new Opcode("JP nn", new [] { "C3", "nn" }, "10", "$nn is copied to PC."));
        Add(new Opcode("JR C,d", new [] { "38", "d" }, "12/7", "If the carry flag is set, the signed value $d is added to PC. The jump is measured from the start of the instruction opcode."));
        Add(new Opcode("JR NC,d", new [] { "30", "d" }, "12/7", "If the carry flag is unset, the signed value $d is added to PC. The jump is measured from the start of the instruction opcode."));
        Add(new Opcode("JR NZ,d", new [] { "20", "d" }, "12/7", "If the zero flag is unset, the signed value $d is added to PC. The jump is measured from the start of the instruction opcode."));
        Add(new Opcode("JR Z,d", new [] { "28", "d" }, "12/7", "If the zero flag is set, the signed value $d is added to PC. The jump is measured from the start of the instruction opcode."));
        Add(new Opcode("JR d", new [] { "18", "d" }, "12", "The signed value $d is added to PC. The jump is measured from the start of the instruction opcode."));
        Add(new Opcode("LD (BC),A", new [] { "02" }, "7", "Stores A into the memory location pointed to by BC."));
        Add(new Opcode("LD (DE),A", new [] { "12" }, "7", "Stores A into the memory location pointed to by DE."));
        Add(new Opcode("LD (HL),n", new [] { "36", "n" }, "10", "Loads $n into (HL)."));
        Add(new Opcode("LD (HL),B", new [] { "70" }, "7", "The contents of B are loaded into (HL)."));
        Add(new Opcode("LD (HL),C", new [] { "71" }, "7", "The contents of C are loaded into (HL)."));
        Add(new Opcode("LD (HL),D", new [] { "72" }, "7", "The contents of D are loaded into (HL)."));
        Add(new Opcode("LD (HL),E", new [] { "73" }, "7", "The contents of E are loaded into (HL)."));
        Add(new Opcode("LD (HL),H", new [] { "74" }, "7", "The contents of H are loaded into (HL)."));
        Add(new Opcode("LD (HL),L", new [] { "75" }, "7", "The contents of L are loaded into (HL)."));
        Add(new Opcode("LD (HL),A", new [] { "77" }, "7", "The contents of A are loaded into (HL)."));
        Add(new Opcode("LD (IX+d),n", new [] { "DD", "36", "d", "n" }, "19", "Stores $n to the memory location pointed to by IX plus $d."));
        Add(new Opcode("LD (IX+d),B", new [] { "DD", "70", "d" }, "19", "Stores B to the memory location pointed to by IX plus $d."));
        Add(new Opcode("LD (IX+d),C", new [] { "DD", "71", "d" }, "19", "Stores C to the memory location pointed to by IX plus $d."));
        Add(new Opcode("LD (IX+d),D", new [] { "DD", "72", "d" }, "19", "Stores D to the memory location pointed to by IX plus $d."));
        Add(new Opcode("LD (IX+d),E", new [] { "DD", "73", "d" }, "19", "Stores E to the memory location pointed to by IX plus $d."));
        Add(new Opcode("LD (IX+d),H", new [] { "DD", "74", "d" }, "19", "Stores H to the memory location pointed to by IX plus $d."));
        Add(new Opcode("LD (IX+d),L", new [] { "DD", "75", "d" }, "19", "Stores L to the memory location pointed to by IX plus $d."));
        Add(new Opcode("LD (IX+d),A", new [] { "DD", "77", "d" }, "19", "Stores A to the memory location pointed to by IX plus $d."));
        Add(new Opcode("LD (IY+d),n", new [] { "FD", "36", "d", "n" }, "19", "Stores $n to the memory location pointed to by IY plus $d."));
        Add(new Opcode("LD (IY+d),B", new [] { "FD", "70", "d" }, "19", "Stores B to the memory location pointed to by IY plus $d."));
        Add(new Opcode("LD (IY+d),C", new [] { "FD", "71", "d" }, "19", "Stores C to the memory location pointed to by IY plus $d."));
        Add(new Opcode("LD (IY+d),D", new [] { "FD", "72", "d" }, "19", "Stores D to the memory location pointed to by IY plus $d."));
        Add(new Opcode("LD (IY+d),E", new [] { "FD", "73", "d" }, "19", "Stores E to the memory location pointed to by IY plus $d."));
        Add(new Opcode("LD (IY+d),H", new [] { "FD", "74", "d" }, "19", "Stores H to the memory location pointed to by IY plus $d."));
        Add(new Opcode("LD (IY+d),L", new [] { "FD", "75", "d" }, "19", "Stores L to the memory location pointed to by IY plus $d."));
        Add(new Opcode("LD (IY+d),A", new [] { "FD", "77", "d" }, "19", "Stores A to the memory location pointed to by IY plus $d."));
        Add(new Opcode("LD (nn),A", new [] { "32", "nn" }, "13", "Stores A into the memory location pointed to by $nn."));
        Add(new Opcode("LD (nn),BC", new [] { "ED", "43", "nn" }, "20", "Stores BC into the memory location pointed to by $nn."));
        Add(new Opcode("LD (nn),DE", new [] { "ED", "53", "nn" }, "20", "Stores DE into the memory location pointed to by $nn."));
        Add(new Opcode("LD (nn),HL", new [] { "22", "nn" }, "16", "Stores HL into the memory location pointed to by $nn."));
        Add(new Opcode("LD (nn),IX", new [] { "DD", "22", "nn" }, "20", "Stores IX into the memory location pointed to by $nn."));
        Add(new Opcode("LD (nn),IY", new [] { "FD", "22", "nn" }, "20", "Stores IY into the memory location pointed to by $nn."));
        Add(new Opcode("LD (nn),SP", new [] { "ED", "73", "nn" }, "20", "Stores SP into the memory location pointed to by $nn."));
        Add(new Opcode("LD A,(BC)", new [] { "0A" }, "7", "Loads the value pointed to by BC into A."));
        Add(new Opcode("LD A,(DE)", new [] { "1A" }, "7", "Loads the value pointed to by DE into A."));
        Add(new Opcode("LD A,(nn)", new [] { "3A", "nn" }, "13", "Loads the value pointed to by $nn into A."));
        Add(new Opcode("LD A,I", new [] { "ED", "57" }, "9", "Stores the value of register I into A."));
        Add(new Opcode("LD A,R", new [] { "ED", "5F" }, "9", "Stores the value of register R into A."));
        Add(new Opcode("LD BC,(nn)", new [] { "ED", "4B", "nn" }, "20", "Loads the value pointed to by $nn into BC."));
        Add(new Opcode("LD DE,(nn)", new [] { "ED", "5B", "nn" }, "20", "Loads the value pointed to by $nn into DE."));
        Add(new Opcode("LD HL,(nn)", new [] { "2A", "nn" }, "16", "Loads the value pointed to by $nn into HL."));
        Add(new Opcode("LD I,A", new [] { "ED", "47" }, "9", "Stores the value of A into register I."));
        Add(new Opcode("LD IX,(nn)", new [] { "DD", "2A", "nn" }, "20", "Loads the value pointed to by $nn into IX."));
        Add(new Opcode("LD IX,nn", new [] { "DD", "21", "nn" }, "14", "Loads $nn into register IX."));
        Add(new Opcode("LD IY,(nn)", new [] { "FD", "2A", "nn" }, "20", "Loads the value pointed to by $nn into IY."));
        Add(new Opcode("LD IY,nn", new [] { "FD", "21", "nn" }, "14", "Loads $nn into register IY."));
        Add(new Opcode("LD R,A", new [] { "ED", "4F" }, "9", "Stores the value of A into register R."));
        Add(new Opcode("LD SP,(nn)", new [] { "ED", "7B", "nn" }, "20", "Loads the value pointed to by $nn into SP."));
        Add(new Opcode("LD SP,HL", new [] { "F9" }, "6", "Loads the value of HL into SP."));
        Add(new Opcode("LD SP,IX", new [] { "DD", "F9" }, "10", "Loads the value of IX into SP."));
        Add(new Opcode("LD SP,IY", new [] { "FD", "F9" }, "10", "Loads the value of IY into SP."));
        Add(new Opcode("LD BC,nn", new [] { "01", "nn" }, "10", "Loads $nn into BC."));
        Add(new Opcode("LD DE,nn", new [] { "11", "nn" }, "10", "Loads $nn into DE."));
        Add(new Opcode("LD HL,nn", new [] { "21", "nn" }, "10", "Loads $nn into HL."));
        Add(new Opcode("LD SP,nn", new [] { "31", "nn" }, "10", "Loads $nn into SP."));
        Add(new Opcode("LD B,(HL)", new [] { "46" }, "7", "The contents of (HL) are loaded into B."));
        Add(new Opcode("LD C,(HL)", new [] { "4E" }, "7", "The contents of (HL) are loaded into C."));
        Add(new Opcode("LD D,(HL)", new [] { "56" }, "7", "The contents of (HL) are loaded into D."));
        Add(new Opcode("LD E,(HL)", new [] { "5E" }, "7", "The contents of (HL) are loaded into E."));
        Add(new Opcode("LD H,(HL)", new [] { "66" }, "7", "The contents of (HL) are loaded into H."));
        Add(new Opcode("LD L,(HL)", new [] { "6E" }, "7", "The contents of (HL) are loaded into L."));
        Add(new Opcode("LD A,(HL)", new [] { "7E" }, "7", "The contents of (HL) are loaded into A."));
        Add(new Opcode("LD B,(IX+d)", new [] { "DD", "46", "d" }, "19", "Loads the value pointed to by IX plus $d into B."));
        Add(new Opcode("LD C,(IX+d)", new [] { "DD", "4E", "d" }, "19", "Loads the value pointed to by IX plus $d into C."));
        Add(new Opcode("LD D,(IX+d)", new [] { "DD", "56", "d" }, "19", "Loads the value pointed to by IX plus $d into D."));
        Add(new Opcode("LD E,(IX+d)", new [] { "DD", "5E", "d" }, "19", "Loads the value pointed to by IX plus $d into E."));
        Add(new Opcode("LD H,(IX+d)", new [] { "DD", "66", "d" }, "19", "Loads the value pointed to by IX plus $d into H."));
        Add(new Opcode("LD L,(IX+d)", new [] { "DD", "6E", "d" }, "19", "Loads the value pointed to by IX plus $d into L."));
        Add(new Opcode("LD A,(IX+d)", new [] { "DD", "7E", "d" }, "19", "Loads the value pointed to by IX plus $d into A."));
        Add(new Opcode("LD B,(IY+d)", new [] { "FD", "46", "d" }, "19", "Loads the value pointed to by IY plus $d into B."));
        Add(new Opcode("LD C,(IY+d)", new [] { "FD", "4E", "d" }, "19", "Loads the value pointed to by IY plus $d into C."));
        Add(new Opcode("LD D,(IY+d)", new [] { "FD", "56", "d" }, "19", "Loads the value pointed to by IY plus $d into D."));
        Add(new Opcode("LD E,(IY+d)", new [] { "FD", "5E", "d" }, "19", "Loads the value pointed to by IY plus $d into E."));
        Add(new Opcode("LD H,(IY+d)", new [] { "FD", "66", "d" }, "19", "Loads the value pointed to by IY plus $d into H."));
        Add(new Opcode("LD L,(IY+d)", new [] { "FD", "6E", "d" }, "19", "Loads the value pointed to by IY plus $d into L."));
        Add(new Opcode("LD A,(IY+d)", new [] { "FD", "7E", "d" }, "19", "Loads the value pointed to by IY plus $d into A."));
        Add(new Opcode("LD B,n", new [] { "06", "n" }, "7", "Loads $n into B."));
        Add(new Opcode("LD C,n", new [] { "0E", "n" }, "7", "Loads $n into C."));
        Add(new Opcode("LD D,n", new [] { "16", "n" }, "7", "Loads $n into D."));
        Add(new Opcode("LD E,n", new [] { "1E", "n" }, "7", "Loads $n into E."));
        Add(new Opcode("LD H,n", new [] { "26", "n" }, "7", "Loads $n into H."));
        Add(new Opcode("LD L,n", new [] { "2E", "n" }, "7", "Loads $n into L."));
        Add(new Opcode("LD A,n", new [] { "3E", "n" }, "7", "Loads $n into A."));
        Add(new Opcode("LD B,B", new [] { "40" }, "4", "The contents of B are loaded into B."));
        Add(new Opcode("LD B,C", new [] { "41" }, "4", "The contents of C are loaded into B."));
        Add(new Opcode("LD B,D", new [] { "42" }, "4", "The contents of D are loaded into B."));
        Add(new Opcode("LD B,E", new [] { "43" }, "4", "The contents of E are loaded into B."));
        Add(new Opcode("LD B,H", new [] { "44" }, "4", "The contents of H are loaded into B."));
        Add(new Opcode("LD B,L", new [] { "45" }, "4", "The contents of L are loaded into B."));
        Add(new Opcode("LD B,A", new [] { "47" }, "4", "The contents of A are loaded into B."));
        Add(new Opcode("LD C,B", new [] { "48" }, "4", "The contents of B are loaded into C."));
        Add(new Opcode("LD C,C", new [] { "49" }, "4", "The contents of C are loaded into C."));
        Add(new Opcode("LD C,D", new [] { "4A" }, "4", "The contents of D are loaded into C."));
        Add(new Opcode("LD C,E", new [] { "4B" }, "4", "The contents of E are loaded into C."));
        Add(new Opcode("LD C,H", new [] { "4C" }, "4", "The contents of H are loaded into C."));
        Add(new Opcode("LD C,L", new [] { "4D" }, "4", "The contents of L are loaded into C."));
        Add(new Opcode("LD C,A", new [] { "4F" }, "4", "The contents of A are loaded into C."));
        Add(new Opcode("LD D,B", new [] { "50" }, "4", "The contents of B are loaded into D."));
        Add(new Opcode("LD D,C", new [] { "51" }, "4", "The contents of C are loaded into D."));
        Add(new Opcode("LD D,D", new [] { "52" }, "4", "The contents of D are loaded into D."));
        Add(new Opcode("LD D,E", new [] { "53" }, "4", "The contents of E are loaded into D."));
        Add(new Opcode("LD D,H", new [] { "54" }, "4", "The contents of H are loaded into D."));
        Add(new Opcode("LD D,L", new [] { "55" }, "4", "The contents of L are loaded into D."));
        Add(new Opcode("LD D,A", new [] { "57" }, "4", "The contents of A are loaded into D."));
        Add(new Opcode("LD E,B", new [] { "58" }, "4", "The contents of B are loaded into E."));
        Add(new Opcode("LD E,C", new [] { "59" }, "4", "The contents of C are loaded into E."));
        Add(new Opcode("LD E,D", new [] { "5A" }, "4", "The contents of D are loaded into E."));
        Add(new Opcode("LD E,E", new [] { "5B" }, "4", "The contents of E are loaded into E."));
        Add(new Opcode("LD E,H", new [] { "5C" }, "4", "The contents of H are loaded into E."));
        Add(new Opcode("LD E,L", new [] { "5D" }, "4", "The contents of L are loaded into E."));
        Add(new Opcode("LD E,A", new [] { "5F" }, "4", "The contents of A are loaded into E."));
        Add(new Opcode("LD H,B", new [] { "60" }, "4", "The contents of B are loaded into H."));
        Add(new Opcode("LD H,C", new [] { "61" }, "4", "The contents of C are loaded into H."));
        Add(new Opcode("LD H,D", new [] { "62" }, "4", "The contents of D are loaded into H."));
        Add(new Opcode("LD H,E", new [] { "63" }, "4", "The contents of E are loaded into H."));
        Add(new Opcode("LD H,H", new [] { "64" }, "4", "The contents of H are loaded into H."));
        Add(new Opcode("LD H,L", new [] { "65" }, "4", "The contents of L are loaded into H."));
        Add(new Opcode("LD H,A", new [] { "67" }, "4", "The contents of A are loaded into H."));
        Add(new Opcode("LD L,B", new [] { "68" }, "4", "The contents of B are loaded into L."));
        Add(new Opcode("LD L,C", new [] { "69" }, "4", "The contents of C are loaded into L."));
        Add(new Opcode("LD L,D", new [] { "6A" }, "4", "The contents of D are loaded into L."));
        Add(new Opcode("LD L,E", new [] { "6B" }, "4", "The contents of E are loaded into L."));
        Add(new Opcode("LD L,H", new [] { "6C" }, "4", "The contents of H are loaded into L."));
        Add(new Opcode("LD L,L", new [] { "6D" }, "4", "The contents of L are loaded into L."));
        Add(new Opcode("LD L,A", new [] { "6F" }, "4", "The contents of A are loaded into L."));
        Add(new Opcode("LD A,B", new [] { "78" }, "4", "The contents of B are loaded into A."));
        Add(new Opcode("LD A,C", new [] { "79" }, "4", "The contents of C are loaded into A."));
        Add(new Opcode("LD A,D", new [] { "7A" }, "4", "The contents of D are loaded into A."));
        Add(new Opcode("LD A,E", new [] { "7B" }, "4", "The contents of E are loaded into A."));
        Add(new Opcode("LD A,H", new [] { "7C" }, "4", "The contents of H are loaded into A."));
        Add(new Opcode("LD A,L", new [] { "7D" }, "4", "The contents of L are loaded into A."));
        Add(new Opcode("LD A,A", new [] { "7F" }, "4", "The contents of A are loaded into A."));
        Add(new Opcode("LDD", new [] { "ED", "A8" }, "16", "Transfers a byte of data from the memory location pointed to by HL to the memory location pointed to by DE. Then HL, DE, and BC are decremented. p/v is reset if BC becomes zero and set otherwise."));
        Add(new Opcode("LDDR", new [] { "ED", "B8" }, "21/16", "Transfers a byte of data from the memory location pointed to by HL to the memory location pointed to by DE. Then HL, DE, and BC are decremented. If BC is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing."));
        Add(new Opcode("LDI", new [] { "ED", "A0" }, "16", "Transfers a byte of data from the memory location pointed to by HL to the memory location pointed to by DE. Then HL and DE are incremented and BC is decremented. p/v is reset if BC becomes zero and set otherwise."));
        Add(new Opcode("LDIR", new [] { "ED", "B0" }, "21/16", "Transfers a byte of data from the memory location pointed to by HL to the memory location pointed to by DE. Then HL and DE are incremented and BC is decremented. If BC is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing."));
        Add(new Opcode("NEG", new [] { "ED", "44" }, "8", "The contents of A are negated (two's complement). Operation is the same as subtracting A from zero."));
        Add(new Opcode("NOP", new [] { "00" }, "4", "No operation is performed."));
        Add(new Opcode("OR (HL)", new [] { "B6" }, "7", "Bitwise OR on A with (HL)."));
        Add(new Opcode("OR (IX+d)", new [] { "DD", "B6", "d" }, "19", "Bitwise OR on A with the value pointed to by IX plus $d."));
        Add(new Opcode("OR (IY+d)", new [] { "FD", "B6", "d" }, "19", "Bitwise OR on A with the value pointed to by IY plus $d."));
        Add(new Opcode("OR n", new [] { "F6", "n" }, "7", "Bitwise OR on A with $n."));
        Add(new Opcode("OR B", new [] { "B0" }, "4", "Bitwise OR on A with B."));
        Add(new Opcode("OR C", new [] { "B1" }, "4", "Bitwise OR on A with C."));
        Add(new Opcode("OR D", new [] { "B2" }, "4", "Bitwise OR on A with D."));
        Add(new Opcode("OR E", new [] { "B3" }, "4", "Bitwise OR on A with E."));
        Add(new Opcode("OR H", new [] { "B4" }, "4", "Bitwise OR on A with H."));
        Add(new Opcode("OR L", new [] { "B5" }, "4", "Bitwise OR on A with L."));
        Add(new Opcode("OR A", new [] { "B7" }, "4", "Bitwise OR on A with A."));
        Add(new Opcode("OTDR", new [] { "ED", "BB" }, "21/16", "B is decremented. A byte from the memory location pointed to by HL is written to port C. Then HL is decremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing."));
        Add(new Opcode("OTIR", new [] { "ED", "B3" }, "21/16", "B is decremented. A byte from the memory location pointed to by HL is written to port C. Then HL is incremented. If B is not zero, this operation is repeated. Interrupts can trigger while this instruction is processing."));
        Add(new Opcode("OUT (C),B", new [] { "ED", "41" }, "12", "The value of B is written to port C."));
        Add(new Opcode("OUT (C),C", new [] { "ED", "49" }, "12", "The value of C is written to port C."));
        Add(new Opcode("OUT (C),D", new [] { "ED", "51" }, "12", "The value of D is written to port C."));
        Add(new Opcode("OUT (C),E", new [] { "ED", "59" }, "12", "The value of E is written to port C."));
        Add(new Opcode("OUT (C),H", new [] { "ED", "61" }, "12", "The value of H is written to port C."));
        Add(new Opcode("OUT (C),L", new [] { "ED", "69" }, "12", "The value of L is written to port C."));
        Add(new Opcode("OUT (C),A", new [] { "ED", "79" }, "12", "The value of A is written to port C."));
        Add(new Opcode("OUT (n),A", new [] { "D3", "n" }, "11", "The value of A is written to port $n."));
        Add(new Opcode("OUTD", new [] { "ED", "AB" }, "16", "B is decremented. A byte from the memory location pointed to by HL is written to port C. Then HL is decremented."));
        Add(new Opcode("OUTI", new [] { "ED", "A3" }, "16", "B is decremented. A byte from the memory location pointed to by HL is written to port C. Then HL is incremented."));
        Add(new Opcode("POP AF", new [] { "F1" }, "10", "The memory location pointed to by SP is stored into f and SP is incremented. The memory location pointed to by SP is stored into A and SP is incremented again."));
        Add(new Opcode("POP BC", new [] { "C1" }, "10", "The memory location pointed to by SP is stored into C and SP is incremented. The memory location pointed to by SP is stored into B and SP is incremented again."));
        Add(new Opcode("POP DE", new [] { "D1" }, "10", "The memory location pointed to by SP is stored into E and SP is incremented. The memory location pointed to by SP is stored into D and SP is incremented again."));
        Add(new Opcode("POP HL", new [] { "E1" }, "10", "The memory location pointed to by SP is stored into L and SP is incremented. The memory location pointed to by SP is stored into H and SP is incremented again."));
        Add(new Opcode("POP IX", new [] { "DD", "E1" }, "14", "The memory location pointed to by SP is stored into IXL and SP is incremented. The memory location pointed to by SP is stored into IXH and SP is incremented again."));
        Add(new Opcode("POP IY", new [] { "FD", "E1" }, "14", "The memory location pointed to by SP is stored into IYL and SP is incremented. The memory location pointed to by SP is stored into IYH and SP is incremented again."));
        Add(new Opcode("PUSH AF", new [] { "F5" }, "11", "SP is decremented and A is stored into the memory location pointed to by SP. SP is decremented again and f is stored into the memory location pointed to by SP."));
        Add(new Opcode("PUSH BC", new [] { "C5" }, "11", "SP is decremented and B is stored into the memory location pointed to by SP. SP is decremented again and C is stored into the memory location pointed to by SP."));
        Add(new Opcode("PUSH DE", new [] { "D5" }, "11", "SP is decremented and D is stored into the memory location pointed to by SP. SP is decremented again and E is stored into the memory location pointed to by SP."));
        Add(new Opcode("PUSH HL", new [] { "E5" }, "11", "SP is decremented and H is stored into the memory location pointed to by SP. SP is decremented again and L is stored into the memory location pointed to by SP."));
        Add(new Opcode("PUSH IX", new [] { "DD", "E5" }, "15", "SP is decremented and IXH is stored into the memory location pointed to by SP. SP is decremented again and IXL is stored into the memory location pointed to by SP."));
        Add(new Opcode("PUSH IY", new [] { "FD", "E5" }, "15", "SP is decremented and IYH is stored into the memory location pointed to by SP. SP is decremented again and IYL is stored into the memory location pointed to by SP."));
        Add(new Opcode("RES 0,(HL)", new [] { "CB", "86" }, "15", "Resets bit 0 of (HL)."));
        Add(new Opcode("RES 1,(HL)", new [] { "CB", "8E" }, "15", "Resets bit 1 of (HL)."));
        Add(new Opcode("RES 2,(HL)", new [] { "CB", "96" }, "15", "Resets bit 2 of (HL)."));
        Add(new Opcode("RES 3,(HL)", new [] { "CB", "9E" }, "15", "Resets bit 3 of (HL)."));
        Add(new Opcode("RES 4,(HL)", new [] { "CB", "A6" }, "15", "Resets bit 4 of (HL)."));
        Add(new Opcode("RES 5,(HL)", new [] { "CB", "AE" }, "15", "Resets bit 5 of (HL)."));
        Add(new Opcode("RES 6,(HL)", new [] { "CB", "B6" }, "15", "Resets bit 6 of (HL)."));
        Add(new Opcode("RES 7,(HL)", new [] { "CB", "BE" }, "15", "Resets bit 7 of (HL)."));
        Add(new Opcode("RES 0,(IX+d)", new [] { "DD", "CB", "d", "86" }, "23", "Resets bit 0 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("RES 1,(IX+d)", new [] { "DD", "CB", "d", "8E" }, "23", "Resets bit 1 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("RES 2,(IX+d)", new [] { "DD", "CB", "d", "96" }, "23", "Resets bit 2 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("RES 3,(IX+d)", new [] { "DD", "CB", "d", "9E" }, "23", "Resets bit 3 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("RES 4,(IX+d)", new [] { "DD", "CB", "d", "A6" }, "23", "Resets bit 4 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("RES 5,(IX+d)", new [] { "DD", "CB", "d", "AE" }, "23", "Resets bit 5 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("RES 6,(IX+d)", new [] { "DD", "CB", "d", "B6" }, "23", "Resets bit 6 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("RES 7,(IX+d)", new [] { "DD", "CB", "d", "BE" }, "23", "Resets bit 7 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("RES 0,(IY+d)", new [] { "FD", "CB", "d", "86" }, "23", "Resets bit 0 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("RES 1,(IY+d)", new [] { "FD", "CB", "d", "8E" }, "23", "Resets bit 1 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("RES 2,(IY+d)", new [] { "FD", "CB", "d", "96" }, "23", "Resets bit 2 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("RES 3,(IY+d)", new [] { "FD", "CB", "d", "9E" }, "23", "Resets bit 3 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("RES 4,(IY+d)", new [] { "FD", "CB", "d", "A6" }, "23", "Resets bit 4 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("RES 5,(IY+d)", new [] { "FD", "CB", "d", "AE" }, "23", "Resets bit 5 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("RES 6,(IY+d)", new [] { "FD", "CB", "d", "B6" }, "23", "Resets bit 6 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("RES 7,(IY+d)", new [] { "FD", "CB", "d", "BE" }, "23", "Resets bit 7 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("RES 0,B", new [] { "CB", "80" }, "8", "Resets bit 0 of B."));
        Add(new Opcode("RES 1,B", new [] { "CB", "88" }, "8", "Resets bit 1 of B."));
        Add(new Opcode("RES 2,B", new [] { "CB", "90" }, "8", "Resets bit 2 of B."));
        Add(new Opcode("RES 3,B", new [] { "CB", "98" }, "8", "Resets bit 3 of B."));
        Add(new Opcode("RES 4,B", new [] { "CB", "A0" }, "8", "Resets bit 4 of B."));
        Add(new Opcode("RES 5,B", new [] { "CB", "A8" }, "8", "Resets bit 5 of B."));
        Add(new Opcode("RES 6,B", new [] { "CB", "B0" }, "8", "Resets bit 6 of B."));
        Add(new Opcode("RES 7,B", new [] { "CB", "B8" }, "8", "Resets bit 7 of B."));
        Add(new Opcode("RES 0,C", new [] { "CB", "81" }, "8", "Resets bit 0 of C."));
        Add(new Opcode("RES 1,C", new [] { "CB", "89" }, "8", "Resets bit 1 of C."));
        Add(new Opcode("RES 2,C", new [] { "CB", "91" }, "8", "Resets bit 2 of C."));
        Add(new Opcode("RES 3,C", new [] { "CB", "99" }, "8", "Resets bit 3 of C."));
        Add(new Opcode("RES 4,C", new [] { "CB", "A1" }, "8", "Resets bit 4 of C."));
        Add(new Opcode("RES 5,C", new [] { "CB", "A9" }, "8", "Resets bit 5 of C."));
        Add(new Opcode("RES 6,C", new [] { "CB", "B1" }, "8", "Resets bit 6 of C."));
        Add(new Opcode("RES 7,C", new [] { "CB", "B9" }, "8", "Resets bit 7 of C."));
        Add(new Opcode("RES 0,D", new [] { "CB", "82" }, "8", "Resets bit 0 of D."));
        Add(new Opcode("RES 1,D", new [] { "CB", "8A" }, "8", "Resets bit 1 of D."));
        Add(new Opcode("RES 2,D", new [] { "CB", "92" }, "8", "Resets bit 2 of D."));
        Add(new Opcode("RES 3,D", new [] { "CB", "9A" }, "8", "Resets bit 3 of D."));
        Add(new Opcode("RES 4,D", new [] { "CB", "A2" }, "8", "Resets bit 4 of D."));
        Add(new Opcode("RES 5,D", new [] { "CB", "AA" }, "8", "Resets bit 5 of D."));
        Add(new Opcode("RES 6,D", new [] { "CB", "B2" }, "8", "Resets bit 6 of D."));
        Add(new Opcode("RES 7,D", new [] { "CB", "BA" }, "8", "Resets bit 7 of D."));
        Add(new Opcode("RES 0,E", new [] { "CB", "83" }, "8", "Resets bit 0 of E."));
        Add(new Opcode("RES 1,E", new [] { "CB", "8B" }, "8", "Resets bit 1 of E."));
        Add(new Opcode("RES 2,E", new [] { "CB", "93" }, "8", "Resets bit 2 of E."));
        Add(new Opcode("RES 3,E", new [] { "CB", "9B" }, "8", "Resets bit 3 of E."));
        Add(new Opcode("RES 4,E", new [] { "CB", "A3" }, "8", "Resets bit 4 of E."));
        Add(new Opcode("RES 5,E", new [] { "CB", "AB" }, "8", "Resets bit 5 of E."));
        Add(new Opcode("RES 6,E", new [] { "CB", "B3" }, "8", "Resets bit 6 of E."));
        Add(new Opcode("RES 7,E", new [] { "CB", "BB" }, "8", "Resets bit 7 of E."));
        Add(new Opcode("RES 0,H", new [] { "CB", "84" }, "8", "Resets bit 0 of H."));
        Add(new Opcode("RES 1,H", new [] { "CB", "8C" }, "8", "Resets bit 1 of H."));
        Add(new Opcode("RES 2,H", new [] { "CB", "94" }, "8", "Resets bit 2 of H."));
        Add(new Opcode("RES 3,H", new [] { "CB", "9C" }, "8", "Resets bit 3 of H."));
        Add(new Opcode("RES 4,H", new [] { "CB", "A4" }, "8", "Resets bit 4 of H."));
        Add(new Opcode("RES 5,H", new [] { "CB", "AC" }, "8", "Resets bit 5 of H."));
        Add(new Opcode("RES 6,H", new [] { "CB", "B4" }, "8", "Resets bit 6 of H."));
        Add(new Opcode("RES 7,H", new [] { "CB", "BC" }, "8", "Resets bit 7 of H."));
        Add(new Opcode("RES 0,L", new [] { "CB", "85" }, "8", "Resets bit 0 of L."));
        Add(new Opcode("RES 1,L", new [] { "CB", "8D" }, "8", "Resets bit 1 of L."));
        Add(new Opcode("RES 2,L", new [] { "CB", "95" }, "8", "Resets bit 2 of L."));
        Add(new Opcode("RES 3,L", new [] { "CB", "9D" }, "8", "Resets bit 3 of L."));
        Add(new Opcode("RES 4,L", new [] { "CB", "A5" }, "8", "Resets bit 4 of L."));
        Add(new Opcode("RES 5,L", new [] { "CB", "AD" }, "8", "Resets bit 5 of L."));
        Add(new Opcode("RES 6,L", new [] { "CB", "B5" }, "8", "Resets bit 6 of L."));
        Add(new Opcode("RES 7,L", new [] { "CB", "BD" }, "8", "Resets bit 7 of L."));
        Add(new Opcode("RES 0,A", new [] { "CB", "87" }, "8", "Resets bit 0 of A."));
        Add(new Opcode("RES 1,A", new [] { "CB", "8F" }, "8", "Resets bit 1 of A."));
        Add(new Opcode("RES 2,A", new [] { "CB", "97" }, "8", "Resets bit 2 of A."));
        Add(new Opcode("RES 3,A", new [] { "CB", "9F" }, "8", "Resets bit 3 of A."));
        Add(new Opcode("RES 4,A", new [] { "CB", "A7" }, "8", "Resets bit 4 of A."));
        Add(new Opcode("RES 5,A", new [] { "CB", "AF" }, "8", "Resets bit 5 of A."));
        Add(new Opcode("RES 6,A", new [] { "CB", "B7" }, "8", "Resets bit 6 of A."));
        Add(new Opcode("RES 7,A", new [] { "CB", "BF" }, "8", "Resets bit 7 of A."));
        Add(new Opcode("RET", new [] { "C9" }, "10", "The top stack entry is popped into PC."));
        Add(new Opcode("RET C", new [] { "D8" }, "11/5", "If the carry flag is set, the top stack entry is popped into PC."));
        Add(new Opcode("RET M", new [] { "F8" }, "11/5", "If the sign flag is set, the top stack entry is popped into PC."));
        Add(new Opcode("RET NC", new [] { "D0" }, "11/5", "If the carry flag is unset, the top stack entry is popped into PC."));
        Add(new Opcode("RET NZ", new [] { "C0" }, "11/5", "If the zero flag is unset, the top stack entry is popped into PC."));
        Add(new Opcode("RET P", new [] { "F0" }, "11/5", "If the sign flag is unset, the top stack entry is popped into PC."));
        Add(new Opcode("RET PE", new [] { "E8" }, "11/5", "If the parity/overflow flag is set, the top stack entry is popped into PC."));
        Add(new Opcode("RET PO", new [] { "E0" }, "11/5", "If the parity/overflow flag is unset, the top stack entry is popped into PC."));
        Add(new Opcode("RET Z", new [] { "C8" }, "11/5", "If the zero flag is set, the top stack entry is popped into PC."));
        Add(new Opcode("RETI", new [] { "ED", "4D" }, "14", "Used at the end of a maskable interrupt service routine. The top stack entry is popped into PC, and signals an I/O device that the interrupt has finished, allowing nested interrupts (not a consideration on the TI)."));
        Add(new Opcode("RETN", new [] { "ED", "45" }, "14", "Used at the end of a non-maskable interrupt service routine (located at 0066h) to pop the top stack entry into PC. The value of IFF2 is copied to IFF1 so that maskable interrupts are allowed to continue as before. NMIs are not enabled on the TI."));
        Add(new Opcode("RL (HL)", new [] { "CB", "16" }, "15", "The contents of (HL) are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RL (IX+d)", new [] { "DD", "CB", "d", "16" }, "23", "The contents of the memory location pointed to by IX plus $d are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RL (IY+d)", new [] { "FD", "CB", "d", "16" }, "23", "The contents of the memory location pointed to by IY plus $d are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RL B", new [] { "CB", "10" }, "8", "The contents of B are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RL C", new [] { "CB", "11" }, "8", "The contents of C are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RL D", new [] { "CB", "12" }, "8", "The contents of D are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RL E", new [] { "CB", "13" }, "8", "The contents of E are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RL H", new [] { "CB", "14" }, "8", "The contents of H are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RL L", new [] { "CB", "15" }, "8", "The contents of L are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RL A", new [] { "CB", "17" }, "8", "The contents of A are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RLA", new [] { "17" }, "4", "The contents of A are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0."));
        Add(new Opcode("RLC (HL)", new [] { "CB", "06" }, "15", "The contents of (HL) are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLC (IX+d)", new [] { "DD", "CB", "d", "06" }, "23", "The contents of the memory location pointed to by IX plus $d are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLC (IY+d)", new [] { "FD", "CB", "d", "06" }, "23", "The contents of the memory location pointed to by IY plus $d are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLC B", new [] { "CB", "00" }, "8", "The contents of B are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLC C", new [] { "CB", "01" }, "8", "The contents of C are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLC D", new [] { "CB", "02" }, "8", "The contents of D are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLC E", new [] { "CB", "03" }, "8", "The contents of E are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLC H", new [] { "CB", "04" }, "8", "The contents of H are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLC L", new [] { "CB", "05" }, "8", "The contents of L are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLC A", new [] { "CB", "07" }, "8", "The contents of A are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLCA", new [] { "07" }, "4", "The contents of A are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0."));
        Add(new Opcode("RLD", new [] { "ED", "6F" }, "18", "The contents of the low-order nibble of (HL) are copied to the high-order nibble of (HL). The previous contents are copied to the low-order nibble of A. The previous contents are copied to the low-order nibble of (HL)."));
        Add(new Opcode("RR (HL)", new [] { "CB", "1E" }, "15", "The contents of (HL) are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RR (IX+d)", new [] { "DD", "CB", "d", "1E" }, "23", "The contents of the memory location pointed to by IX plus $d are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RR (IY+d)", new [] { "FD", "CB", "d", "1E" }, "23", "The contents of the memory location pointed to by IY plus $d are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RR B", new [] { "CB", "18" }, "8", "The contents of B are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RR C", new [] { "CB", "19" }, "8", "The contents of C are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RR D", new [] { "CB", "1A" }, "8", "The contents of D are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RR E", new [] { "CB", "1B" }, "8", "The contents of E are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RR H", new [] { "CB", "1C" }, "8", "The contents of H are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RR L", new [] { "CB", "1D" }, "8", "The contents of L are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RR A", new [] { "CB", "1F" }, "8", "The contents of A are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RRA", new [] { "1F" }, "4", "The contents of A are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7."));
        Add(new Opcode("RRC (HL)", new [] { "CB", "0E" }, "15", "The contents of (HL) are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRC (IX+d)", new [] { "DD", "CB", "d", "0E" }, "23", "The contents of the memory location pointed to by IX plus $d are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRC (IY+d)", new [] { "FD", "CB", "d", "0E" }, "23", "The contents of the memory location pointed to by IY plus $d are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRC B", new [] { "CB", "08" }, "8", "The contents of B are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRC C", new [] { "CB", "09" }, "8", "The contents of C are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRC D", new [] { "CB", "0A" }, "8", "The contents of D are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRC E", new [] { "CB", "0B" }, "8", "The contents of E are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRC H", new [] { "CB", "0C" }, "8", "The contents of H are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRC L", new [] { "CB", "0D" }, "8", "The contents of L are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRC A", new [] { "CB", "0F" }, "8", "The contents of A are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRCA", new [] { "0F" }, "4", "The contents of A are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7."));
        Add(new Opcode("RRD", new [] { "ED", "67" }, "18", "The contents of the low-order nibble of (HL) are copied to the low-order nibble of A. The previous contents are copied to the high-order nibble of (HL). The previous contents are copied to the low-order nibble of (HL)."));
        Add(new Opcode("RST 0", new [] { "C7" }, "11", "The current PC value plus one is pushed onto the stack, then is loaded with 0."));
        Add(new Opcode("RST 8", new [] { "CF" }, "11", "The current PC value plus one is pushed onto the stack, then is loaded with 8."));
        Add(new Opcode("RST 16", new [] { "D7" }, "11", "The current PC value plus one is pushed onto the stack, then is loaded with 16."));
        Add(new Opcode("RST 24", new [] { "DF" }, "11", "The current PC value plus one is pushed onto the stack, then is loaded with 24."));
        Add(new Opcode("RST 32", new [] { "E7" }, "11", "The current PC value plus one is pushed onto the stack, then is loaded with 32."));
        Add(new Opcode("RST 40", new [] { "EF" }, "11", "The current PC value plus one is pushed onto the stack, then is loaded with 40."));
        Add(new Opcode("RST 48", new [] { "F7" }, "11", "The current PC value plus one is pushed onto the stack, then is loaded with 48."));
        Add(new Opcode("RST 56", new [] { "FF" }, "11", "The current PC value plus one is pushed onto the stack, then is loaded with 56."));
        Add(new Opcode("SBC A,(HL)", new [] { "9E" }, "7", "Subtracts (HL) and the carry flag from A."));
        Add(new Opcode("SBC A,(IX+d)", new [] { "DD", "9E", "d" }, "19", "Subtracts the value pointed to by IX plus $d and the carry flag from A."));
        Add(new Opcode("SBC A,(IY+d)", new [] { "FD", "9E", "d" }, "19", "Subtracts the value pointed to by IY plus $d and the carry flag from A."));
        Add(new Opcode("SBC A,n", new [] { "DE", "n" }, "7", "Subtracts $n and the carry flag from A."));
        Add(new Opcode("SBC A,B", new [] { "98" }, "4", "Subtracts B and the carry flag from A."));
        Add(new Opcode("SBC A,C", new [] { "99" }, "4", "Subtracts C and the carry flag from A."));
        Add(new Opcode("SBC A,D", new [] { "9A" }, "4", "Subtracts D and the carry flag from A."));
        Add(new Opcode("SBC A,E", new [] { "9B" }, "4", "Subtracts E and the carry flag from A."));
        Add(new Opcode("SBC A,H", new [] { "9C" }, "4", "Subtracts H and the carry flag from A."));
        Add(new Opcode("SBC A,L", new [] { "9D" }, "4", "Subtracts L and the carry flag from A."));
        Add(new Opcode("SBC A,A", new [] { "9F" }, "4", "Subtracts A and the carry flag from A."));
        Add(new Opcode("SBC HL,BC", new [] { "ED", "42" }, "15", "Subtracts BC and the carry flag from HL."));
        Add(new Opcode("SBC HL,DE", new [] { "ED", "52" }, "15", "Subtracts DE and the carry flag from HL."));
        Add(new Opcode("SBC HL,HL", new [] { "ED", "62" }, "15", "Subtracts HL and the carry flag from HL."));
        Add(new Opcode("SBC HL,SP", new [] { "ED", "72" }, "15", "Subtracts SP and the carry flag from HL."));
        Add(new Opcode("SCF", new [] { "37" }, "4", "Sets the carry flag."));
        Add(new Opcode("SET 0,(HL)", new [] { "CB", "C6" }, "15", "Sets bit 0 of (HL)."));
        Add(new Opcode("SET 1,(HL)", new [] { "CB", "CE" }, "15", "Sets bit 1 of (HL)."));
        Add(new Opcode("SET 2,(HL)", new [] { "CB", "D6" }, "15", "Sets bit 2 of (HL)."));
        Add(new Opcode("SET 3,(HL)", new [] { "CB", "DE" }, "15", "Sets bit 3 of (HL)."));
        Add(new Opcode("SET 4,(HL)", new [] { "CB", "E6" }, "15", "Sets bit 4 of (HL)."));
        Add(new Opcode("SET 5,(HL)", new [] { "CB", "EE" }, "15", "Sets bit 5 of (HL)."));
        Add(new Opcode("SET 6,(HL)", new [] { "CB", "F6" }, "15", "Sets bit 6 of (HL)."));
        Add(new Opcode("SET 7,(HL)", new [] { "CB", "FE" }, "15", "Sets bit 7 of (HL)."));
        Add(new Opcode("SET 0,(IX+d)", new [] { "DD", "CB", "d", "C6" }, "23", "Sets bit 0 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("SET 1,(IX+d)", new [] { "DD", "CB", "d", "CE" }, "23", "Sets bit 1 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("SET 2,(IX+d)", new [] { "DD", "CB", "d", "D6" }, "23", "Sets bit 2 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("SET 3,(IX+d)", new [] { "DD", "CB", "d", "DE" }, "23", "Sets bit 3 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("SET 4,(IX+d)", new [] { "DD", "CB", "d", "E6" }, "23", "Sets bit 4 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("SET 5,(IX+d)", new [] { "DD", "CB", "d", "EE" }, "23", "Sets bit 5 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("SET 6,(IX+d)", new [] { "DD", "CB", "d", "F6" }, "23", "Sets bit 6 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("SET 7,(IX+d)", new [] { "DD", "CB", "d", "FE" }, "23", "Sets bit 7 of the memory location pointed to by IX plus $d."));
        Add(new Opcode("SET 0,(IY+d)", new [] { "FD", "CB", "d", "C6" }, "23", "Sets bit 0 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("SET 1,(IY+d)", new [] { "FD", "CB", "d", "CE" }, "23", "Sets bit 1 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("SET 2,(IY+d)", new [] { "FD", "CB", "d", "D6" }, "23", "Sets bit 2 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("SET 3,(IY+d)", new [] { "FD", "CB", "d", "DE" }, "23", "Sets bit 3 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("SET 4,(IY+d)", new [] { "FD", "CB", "d", "E6" }, "23", "Sets bit 4 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("SET 5,(IY+d)", new [] { "FD", "CB", "d", "EE" }, "23", "Sets bit 5 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("SET 6,(IY+d)", new [] { "FD", "CB", "d", "F6" }, "23", "Sets bit 6 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("SET 7,(IY+d)", new [] { "FD", "CB", "d", "FE" }, "23", "Sets bit 7 of the memory location pointed to by IY plus $d."));
        Add(new Opcode("SET 0,B", new [] { "CB", "C0" }, "8", "Sets bit 0 of B."));
        Add(new Opcode("SET 1,B", new [] { "CB", "C8" }, "8", "Sets bit 1 of B."));
        Add(new Opcode("SET 2,B", new [] { "CB", "D0" }, "8", "Sets bit 2 of B."));
        Add(new Opcode("SET 3,B", new [] { "CB", "D8" }, "8", "Sets bit 3 of B."));
        Add(new Opcode("SET 4,B", new [] { "CB", "E0" }, "8", "Sets bit 4 of B."));
        Add(new Opcode("SET 5,B", new [] { "CB", "E8" }, "8", "Sets bit 5 of B."));
        Add(new Opcode("SET 6,B", new [] { "CB", "F0" }, "8", "Sets bit 6 of B."));
        Add(new Opcode("SET 7,B", new [] { "CB", "F8" }, "8", "Sets bit 7 of B."));
        Add(new Opcode("SET 0,C", new [] { "CB", "C1" }, "8", "Sets bit 0 of C."));
        Add(new Opcode("SET 1,C", new [] { "CB", "C9" }, "8", "Sets bit 1 of C."));
        Add(new Opcode("SET 2,C", new [] { "CB", "D1" }, "8", "Sets bit 2 of C."));
        Add(new Opcode("SET 3,C", new [] { "CB", "D9" }, "8", "Sets bit 3 of C."));
        Add(new Opcode("SET 4,C", new [] { "CB", "E1" }, "8", "Sets bit 4 of C."));
        Add(new Opcode("SET 5,C", new [] { "CB", "E9" }, "8", "Sets bit 5 of C."));
        Add(new Opcode("SET 6,C", new [] { "CB", "F1" }, "8", "Sets bit 6 of C."));
        Add(new Opcode("SET 7,C", new [] { "CB", "F9" }, "8", "Sets bit 7 of C."));
        Add(new Opcode("SET 0,D", new [] { "CB", "C2" }, "8", "Sets bit 0 of D."));
        Add(new Opcode("SET 1,D", new [] { "CB", "CA" }, "8", "Sets bit 1 of D."));
        Add(new Opcode("SET 2,D", new [] { "CB", "D2" }, "8", "Sets bit 2 of D."));
        Add(new Opcode("SET 3,D", new [] { "CB", "DA" }, "8", "Sets bit 3 of D."));
        Add(new Opcode("SET 4,D", new [] { "CB", "E2" }, "8", "Sets bit 4 of D."));
        Add(new Opcode("SET 5,D", new [] { "CB", "EA" }, "8", "Sets bit 5 of D."));
        Add(new Opcode("SET 6,D", new [] { "CB", "F2" }, "8", "Sets bit 6 of D."));
        Add(new Opcode("SET 7,D", new [] { "CB", "FA" }, "8", "Sets bit 7 of D."));
        Add(new Opcode("SET 0,E", new [] { "CB", "C3" }, "8", "Sets bit 0 of E."));
        Add(new Opcode("SET 1,E", new [] { "CB", "CB" }, "8", "Sets bit 1 of E."));
        Add(new Opcode("SET 2,E", new [] { "CB", "D3" }, "8", "Sets bit 2 of E."));
        Add(new Opcode("SET 3,E", new [] { "CB", "DB" }, "8", "Sets bit 3 of E."));
        Add(new Opcode("SET 4,E", new [] { "CB", "E3" }, "8", "Sets bit 4 of E."));
        Add(new Opcode("SET 5,E", new [] { "CB", "EB" }, "8", "Sets bit 5 of E."));
        Add(new Opcode("SET 6,E", new [] { "CB", "F3" }, "8", "Sets bit 6 of E."));
        Add(new Opcode("SET 7,E", new [] { "CB", "FB" }, "8", "Sets bit 7 of E."));
        Add(new Opcode("SET 0,H", new [] { "CB", "C4" }, "8", "Sets bit 0 of H."));
        Add(new Opcode("SET 1,H", new [] { "CB", "CC" }, "8", "Sets bit 1 of H."));
        Add(new Opcode("SET 2,H", new [] { "CB", "D4" }, "8", "Sets bit 2 of H."));
        Add(new Opcode("SET 3,H", new [] { "CB", "DC" }, "8", "Sets bit 3 of H."));
        Add(new Opcode("SET 4,H", new [] { "CB", "E4" }, "8", "Sets bit 4 of H."));
        Add(new Opcode("SET 5,H", new [] { "CB", "EC" }, "8", "Sets bit 5 of H."));
        Add(new Opcode("SET 6,H", new [] { "CB", "F4" }, "8", "Sets bit 6 of H."));
        Add(new Opcode("SET 7,H", new [] { "CB", "FC" }, "8", "Sets bit 7 of H."));
        Add(new Opcode("SET 0,L", new [] { "CB", "C5" }, "8", "Sets bit 0 of L."));
        Add(new Opcode("SET 1,L", new [] { "CB", "CD" }, "8", "Sets bit 1 of L."));
        Add(new Opcode("SET 2,L", new [] { "CB", "D5" }, "8", "Sets bit 2 of L."));
        Add(new Opcode("SET 3,L", new [] { "CB", "DD" }, "8", "Sets bit 3 of L."));
        Add(new Opcode("SET 4,L", new [] { "CB", "E5" }, "8", "Sets bit 4 of L."));
        Add(new Opcode("SET 5,L", new [] { "CB", "ED" }, "8", "Sets bit 5 of L."));
        Add(new Opcode("SET 6,L", new [] { "CB", "F5" }, "8", "Sets bit 6 of L."));
        Add(new Opcode("SET 7,L", new [] { "CB", "FD" }, "8", "Sets bit 7 of L."));
        Add(new Opcode("SET 0,A", new [] { "CB", "C7" }, "8", "Sets bit 0 of A."));
        Add(new Opcode("SET 1,A", new [] { "CB", "CF" }, "8", "Sets bit 1 of A."));
        Add(new Opcode("SET 2,A", new [] { "CB", "D7" }, "8", "Sets bit 2 of A."));
        Add(new Opcode("SET 3,A", new [] { "CB", "DF" }, "8", "Sets bit 3 of A."));
        Add(new Opcode("SET 4,A", new [] { "CB", "E7" }, "8", "Sets bit 4 of A."));
        Add(new Opcode("SET 5,A", new [] { "CB", "EF" }, "8", "Sets bit 5 of A."));
        Add(new Opcode("SET 6,A", new [] { "CB", "F7" }, "8", "Sets bit 6 of A."));
        Add(new Opcode("SET 7,A", new [] { "CB", "FF" }, "8", "Sets bit 7 of A."));
        Add(new Opcode("SLA (HL)", new [] { "CB", "26" }, "15", "The contents of (HL) are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SLA (IX+d)", new [] { "DD", "CB", "d", "26" }, "23", "The contents of the memory location pointed to by IX plus $d are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SLA (IY+d)", new [] { "FD", "CB", "d", "26" }, "23", "The contents of the memory location pointed to by IY plus $d are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SLA B", new [] { "CB", "20" }, "8", "The contents of B are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SLA C", new [] { "CB", "21" }, "8", "The contents of C are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SLA D", new [] { "CB", "22" }, "8", "The contents of D are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SLA E", new [] { "CB", "23" }, "8", "The contents of E are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SLA H", new [] { "CB", "24" }, "8", "The contents of H are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SLA L", new [] { "CB", "25" }, "8", "The contents of L are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SLA A", new [] { "CB", "27" }, "8", "The contents of A are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0."));
        Add(new Opcode("SRA (HL)", new [] { "CB", "2E" }, "15", "The contents of (HL) are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRA (IX+d)", new [] { "DD", "CB", "d", "2E" }, "23", "The contents of the memory location pointed to by IX plus $d are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRA (IY+d)", new [] { "FD", "CB", "d", "2E" }, "23", "The contents of the memory location pointed to by IY plus $d are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRA B", new [] { "CB", "28" }, "8", "The contents of B are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRA C", new [] { "CB", "29" }, "8", "The contents of C are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRA D", new [] { "CB", "2A" }, "8", "The contents of D are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRA E", new [] { "CB", "2B" }, "8", "The contents of E are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRA H", new [] { "CB", "2C" }, "8", "The contents of H are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRA L", new [] { "CB", "2D" }, "8", "The contents of L are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRA A", new [] { "CB", "2F" }, "8", "The contents of A are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged."));
        Add(new Opcode("SRL (HL)", new [] { "CB", "3E" }, "15", "The contents of (HL) are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SRL (IX+d)", new [] { "DD", "CB", "d", "3E" }, "23", "The contents of the memory location pointed to by IX plus $d are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SRL (IY+d)", new [] { "FD", "CB", "d", "3E" }, "23", "The contents of the memory location pointed to by IY plus $d are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SRL B", new [] { "CB", "38" }, "8", "The contents of B are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SRL C", new [] { "CB", "39" }, "8", "The contents of C are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SRL D", new [] { "CB", "3A" }, "8", "The contents of D are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SRL E", new [] { "CB", "3B" }, "8", "The contents of E are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SRL H", new [] { "CB", "3C" }, "8", "The contents of H are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SRL L", new [] { "CB", "3D" }, "8", "The contents of L are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SRL A", new [] { "CB", "3F" }, "8", "The contents of A are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7."));
        Add(new Opcode("SUB (HL)", new [] { "96" }, "7", "Subtracts (HL) from A."));
        Add(new Opcode("SUB (IX+d)", new [] { "DD", "96", "d" }, "19", "Subtracts the value pointed to by IX plus $d from A."));
        Add(new Opcode("SUB (IY+d)", new [] { "FD", "96", "d" }, "19", "Subtracts the value pointed to by IY plus $d from A."));
        Add(new Opcode("SUB n", new [] { "D6", "n" }, "7", "Subtracts $n from A."));
        Add(new Opcode("SUB B", new [] { "90" }, "4", "Subtracts B from A."));
        Add(new Opcode("SUB C", new [] { "91" }, "4", "Subtracts C from A."));
        Add(new Opcode("SUB D", new [] { "92" }, "4", "Subtracts D from A."));
        Add(new Opcode("SUB E", new [] { "93" }, "4", "Subtracts E from A."));
        Add(new Opcode("SUB H", new [] { "94" }, "4", "Subtracts H from A."));
        Add(new Opcode("SUB L", new [] { "95" }, "4", "Subtracts L from A."));
        Add(new Opcode("SUB A", new [] { "97" }, "4", "Subtracts A from A."));
        Add(new Opcode("XOR (HL)", new [] { "AE" }, "7", "Bitwise XOR on A with (HL)."));
        Add(new Opcode("XOR (IX+d)", new [] { "DD", "AE", "d" }, "19", "Bitwise XOR on A with the value pointed to by IX plus $d."));
        Add(new Opcode("XOR (IY+d)", new [] { "FD", "AE", "d" }, "19", "Bitwise XOR on A with the value pointed to by IY plus $d."));
        Add(new Opcode("XOR n", new [] { "EE", "n" }, "7", "Bitwise XOR on A with $n."));
        Add(new Opcode("XOR B", new [] { "A8" }, "4", "Bitwise XOR on A with B."));
        Add(new Opcode("XOR C", new [] { "A9" }, "4", "Bitwise XOR on A with C."));
        Add(new Opcode("XOR D", new [] { "AA" }, "4", "Bitwise XOR on A with D."));
        Add(new Opcode("XOR E", new [] { "AB" }, "4", "Bitwise XOR on A with E."));
        Add(new Opcode("XOR H", new [] { "AC" }, "4", "Bitwise XOR on A with H."));
        Add(new Opcode("XOR L", new [] { "AD" }, "4", "Bitwise XOR on A with L."));
        Add(new Opcode("XOR A", new [] { "AF" }, "4", "Bitwise XOR on A with A."));
    }
}
